# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/15_routers.ipynb.

# %% auto 0
__all__ = ['auth_router', 'userinput_router', 'user_router', 'login', 'get_userinputs', 'create_userinputs', 'get_userinput',
           'delete_userinput', 'update_userinput', 'create_user']

# %% ../nbs/15_routers.ipynb 7
from typing import List, Optional
from fastapi import Response, status, HTTPException, Depends, APIRouter
from fastapi.security.oauth2 import OAuth2PasswordRequestForm
# from pydantic import BaseModel
# # from passlib.context import CryptContext
# from fastapi.middleware.cors import CORSMiddleware
# from fastapi.params import Body
# from random import randrange
# import psycopg2
# from psycopg2.extras import RealDictCursor

# ## sqlalchemy and ORM (database.py from tut)
# from sqlalchemy import create_engine
# from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy import and_
# SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:p@localhost/sai_db2'
# engine = create_engine(SQLALCHEMY_DATABASE_URL)
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
# Base = declarative_base()

import aishiftscheduler.dbmodels as dbm
import aishiftscheduler.schemas as sch
import aishiftscheduler.utils as utl
import aishiftscheduler.oauth2 as oa2
from .database import get_db

# %% ../nbs/15_routers.ipynb 9
auth_router = APIRouter(tags=['Authentication'])

# %% ../nbs/15_routers.ipynb 10
@auth_router.post('/login', response_model=sch.Token)
# def login(user_credentials: sch.UserLogin, db: Session=Depends(get_db)):
def login(user_credentials: OAuth2PasswordRequestForm=Depends(), db: Session=Depends(get_db)):
    # user = db.query(dbm.User).filter(dbm.User.email == user_credentials.email).first()
    user = db.query(dbm.User).filter(dbm.User.email == user_credentials.username).first()

    if not user:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN, 
            # detail=f"Invalid Credentials"
            detail=f"not user !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        )

    if not utl.verify(user_credentials.password, user.password):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN, 
            # detail=f"Invalid Credentials"
            detail=f"fail verify !!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        )
    
    ## create a token
    ## return token
    access_token = oa2.create_access_token(data={"user_id": user.id})
    return {"access_token": access_token, "token_type": "bearer"}

# %% ../nbs/15_routers.ipynb 12
userinput_router = APIRouter(
    prefix="/userinputs",
    tags=['UsersInputs']
)

# %% ../nbs/15_routers.ipynb 14
# @app.get("/userinputs", response_model=List[sch.UserInput])
@userinput_router.get("/", response_model=List[sch.UserInput])
# def get_userinputs(db: Session=Depends(get_db), current_user=Depends(oa2.get_current_user)):
def get_userinputs(
  db: Session=Depends(get_db), 
  current_user = Depends(oa2.get_current_user),
  limit: int = 10, skip: int = 0, search: Optional[str] = ""):
    print(f'{limit=}')
    ## userinputs = db.query(dbm.UserInput).all()
    userinputs = db.query(dbm.UserInput) \
      .filter(
          and_(dbm.UserInput.user_id == current_user.id, dbm.UserInput.resources.contains(search))) \
      .limit(limit).offset(skip).all()
    return userinputs

# %% ../nbs/15_routers.ipynb 15
@userinput_router.post("/", status_code=status.HTTP_201_CREATED, response_model=sch.UserInput)
# def create_userinputs(userinput: sch.UserInputCreate, db: Session = Depends(get_db), get_current_user: int=Depends(oa2.get_current_user)):
# def create_userinputs(userinput: sch.UserInputCreate, db: Session = Depends(get_db), user_id: int=Depends(oa2.get_current_user)):
def create_userinputs(userinput: sch.UserInputCreate, db: Session = Depends(get_db), current_user: int=Depends(oa2.get_current_user)):  
    # print(user_id)
    # print(current_user.email)
    # new_userinput = dbm.UserInput(**userinput.model_dump())
    new_userinput = dbm.UserInput(user_id=current_user.id, **userinput.model_dump())
    db.add(new_userinput)
    db.commit()
    db.refresh(new_userinput)
    return new_userinput

# %% ../nbs/15_routers.ipynb 16
@userinput_router.get("/{id}", response_model=sch.UserInput)
# def get_userinput(id: int, db: Session = Depends(get_db), user_id: int=Depends(oa2.get_current_user)):
def get_userinput(id: int, db: Session = Depends(get_db), current_user: int=Depends(oa2.get_current_user)):
    # userinput = db.query(dbm.UserInput).filter(dbm.UserInput.id == id).first()
    userinput = db.query(dbm.UserInput).filter(dbm.UserInput.user_id == current_user.id).first()
    if not userinput:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"userinput with id: {id} was not found")
    return userinput

# %% ../nbs/15_routers.ipynb 17
@userinput_router.delete("/{id}", status_code=status.HTTP_204_NO_CONTENT)
# def delete_userinput(id: int, db: Session = Depends(get_db), user_id: int=Depends(oa2.get_current_user)):
def delete_userinput(id: int, db: Session = Depends(get_db), current_user: int=Depends(oa2.get_current_user)):
    userinput_query = db.query(dbm.UserInput).filter(dbm.UserInput.id == id)
    userinput = userinput_query.first()
    if userinput == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"userinput with id: {id} does not exist")
    if userinput.user_id != current_user.id:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not authorized to perform requested action")
    userinput_query.delete(synchronize_session=False)
    db.commit()
    return Response(status_code=status.HTTP_204_NO_CONTENT)


# %% ../nbs/15_routers.ipynb 18
@userinput_router.put("/{id}", response_model=sch.UserInput)
# def update_userinput(id: int, updated_userinput: sch.UserInputUpdate, db: Session=Depends(get_db), user_id: int=Depends(oa2.get_current_user)):
def update_userinput(id: int, updated_userinput: sch.UserInputUpdate, db: Session=Depends(get_db), current_user: int=Depends(oa2.get_current_user)):
    userinput_query = db.query(dbm.UserInput).filter(dbm.UserInput.id == id)
    userinput = userinput_query.first()
    if userinput == None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, 
            detail=f"userinput with id: {id} does not exist")
    if userinput.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to perform requested action")
    userinput_query.update(updated_userinput.model_dump(), synchronize_session=False)
    db.commit()
    return userinput_query.first()

# %% ../nbs/15_routers.ipynb 20
user_router = APIRouter(
    prefix="/users",
    tags=['Users']
)

# %% ../nbs/15_routers.ipynb 21
## users
@user_router.post("/", status_code=status.HTTP_201_CREATED, response_model=sch.UserOut)
def create_user(user: sch.UserCreate, db: Session=Depends(get_db)):

    # has the password - user.password
    # hashed_password = pwd_context.hash(user.password)
    hashed_password = utl.hash(user.password)
    user.password = hashed_password

    new_user = dbm.User(**user.model_dump())
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user
