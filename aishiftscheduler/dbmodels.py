# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/13_dbmodels.ipynb.

# %% auto 0
__all__ = ['UserInput']

# %% ../nbs/13_dbmodels.ipynb 7
# from collections import defaultdict
# import numpy as np
# import pandas as pd
# import matplotlib as mpl
# import matplotlib.pyplot as plt
# from copy import copy
# import time
# import math
# from pprint import pprint
# import ray
# import json
# from io import StringIO
# import aishiftscheduler.loader as ldr
# import aishiftscheduler.config as cf
# import aishiftscheduler.visualization as vis
# import aishiftscheduler.model as mod
# import aishiftscheduler.policy as pol
# import aishiftscheduler.inferencer as inf
# import aishiftscheduler.trainer as trn
# import aishiftscheduler.evaluator as evl
# import aishiftscheduler.parameters as par
# from PIL import Image
# import aishiftscheduler.utils as utl
# from fastapi import FastAPI, Response, status, HTTPException, Depends
# from pydantic import BaseModel
# from fastapi.middleware.cors import CORSMiddleware
# from fastapi.params import Body
# from random import randrange
# import psycopg2
# from psycopg2.extras import RealDictCursor

# %% ../nbs/13_dbmodels.ipynb 8
# models.py from tut
from .production import Base
from sqlalchemy import Column, Integer, String
from sqlalchemy.sql.expression import text
from sqlalchemy.sql.sqltypes import TIMESTAMP

class UserInput(Base):
    __tablename__ = "userinputs"

    id = Column(Integer, primary_key=True, nullable=False)
    start = Column(String, nullable=False)
    slots_per_day = Column(Integer, nullable=False)
    max_daily_slot_run = Column(Integer, nullable=False)
    resources = Column(String, nullable=False)
    demands_per_busyness = Column(String, nullable=False)
    demands_per_volume = Column(String, nullable=False)
    demands_per_revenue = Column(String, nullable=False)
    resource_expenses = Column(String, nullable=False)
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))

# Base.metadata.create_all(bind=engine)

# def get_db():
#     db = SessionLocal()
#     try:
#         yield db
#     finally:
#         db.close()
