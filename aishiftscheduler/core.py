# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Pars', 'V', 'ThetasCumSlots', 'ThetasSickProb', 'ThetasCumMerits', 'ThetasSelect', 'thetas_list', 'Thetas', 'start',
           'L', 'T', 'First_n_t', 'Last_n_t', 'ThetaStar_expCbarcum', 'ThetaStar_expCtilcum', 'Cbarcum', 'Ctilcum',
           'Best_theta', 'Worst_theta', 'Best_Cbarcum', 'Worst_Cbarcum', 'Best_Ctilcum', 'Worst_Ctilcum', 'Record',
           'Df_first_n_t', 'Df_last_n_t', 'end', 'ThetaStar_expCbarcum_evalu_opt', 'ThetaStar_expCtilcum_evalu_opt',
           'Best_theta_evalu_opt', 'Worst_theta_evalu_opt', 'Record_evalu_opt', 'Df_evalu_opt',
           'ThetaStar_expCbarcum_evalu_non', 'ThetaStar_expCtilcum_evalu_non', 'Best_theta_evalu_non',
           'Worst_theta_evalu_non', 'Record_evalu_non', 'Df_evalu_non']

# %% ../nbs/00_core.ipynb 16
from collections import defaultdict
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
from copy import copy
import time
import math
from pprint import pprint
import ray
import json
from io import StringIO
import aishiftscheduler.loader as ldr
import aishiftscheduler.config as cf
import aishiftscheduler.visualization as vis
import aishiftscheduler.model as mod
import aishiftscheduler.policy as pol
import aishiftscheduler.inferencer as inf
import aishiftscheduler.trainer as trn
import aishiftscheduler.evaluator as evl
import aishiftscheduler.parameters as par
import aishiftscheduler.utils as utl
from PIL import Image

# %% ../nbs/00_core.ipynb 20
pd.options.display.float_format = '{:,.4f}'.format
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)

# %% ../nbs/00_core.ipynb 26
Pars = par.Parameters()

# %% ../nbs/00_core.ipynb 61
V = vis.Visualization()

# %% ../nbs/00_core.ipynb 66
ThetasCumSlots = np.arange(cf.TH_CumSlots_SPEC[0], cf.TH_CumSlots_SPEC[1], cf.TH_CumSlots_SPEC[2])
## ThetasCumSlots = TH_CumSlots_SPEC

## ThetasSickProb = np.arange(TH_SickProb_SPEC[0], TH_SickProb_SPEC[1], TH_SickProb_SPEC[2])
ThetasSickProb = cf.TH_SickProb_SPEC

ThetasCumMerits = np.arange(cf.TH_CumMerits_SPEC[0], cf.TH_CumMerits_SPEC[1], cf.TH_CumMerits_SPEC[2])
## ThetasCumMerits = TH_CumMerits_SPEC

## BALANCE/REMAINING 
## ThetasContSlots = np.arange(TH_ContSlots_SPEC[0], TH_ContSlots_SPEC[1], TH_ContSlots_SPEC[2])
## ThetasContSlots = TH_ContSlots_SPEC

ThetasSelect = cf.TH_Select_SPEC

thetas_list = [
    ( round(th0,2), round(th1,2), round(th2,2), round(1-(th0+th1+th2),2), th4 )
    for th0 in ThetasCumSlots
      for th1 in ThetasSickProb
        for th2 in ThetasCumMerits if (th0 + th1 + th2) <= 1.0
          for th4 in ThetasSelect
]
Thetas = [
    ## P.build_theta({'thCumSlots': tup[0], 'thSickProb': tup[1], 'thCumMerits': tup[2], 'thSelect': tup[3]})
    pol.Policy(None).build_theta({
      'thCumSlots': tup[0], 
      'thSickProb': tup[1], 
      'thCumMerits': tup[2], 
      'thContSlots': tup[3], 
      'thSelect': tup[4]
      })
    for tup in thetas_list
]

# %% ../nbs/00_core.ipynb 67
start = time.time()
ray.shutdown()
ray.init()

L = 2 #5 #20 #10 #5 #2 #3 #2db #10pub
T = 7*Pars.SLOTS_PER_DAY #5 #7*96
First_n_t = int(1.2*T)
Last_n_t = int(1*T) ##make whole multiple of T to look better in chart

ThetaStar_expCbarcum, ThetaStar_expCtilcum, \
Cbarcum, Ctilcum, \
Best_theta, Worst_theta, \
Best_Cbarcum, Worst_Cbarcum, \
Best_Ctilcum, Worst_Ctilcum, \
Record = \
  trn.do_train(L, T, Thetas, Pars)

f'{ThetaStar_expCbarcum.iloc[-1]=:.2f}'
Df_first_n_t = pd.DataFrame.from_records(Record[:First_n_t], columns=Pars.LABELS)
Df_last_n_t = pd.DataFrame.from_records(Record[-Last_n_t:], columns=Pars.LABELS)
end = time.time(); print(f'EXECUTION TIME: {end - start} seconds')

# %% ../nbs/00_core.ipynb 84
start = time.time()
## to test
# if 'EVALU' in cf.MODES:
L = 2 #20 #5 #2 #2db #10pub
T = 7*Pars.SLOTS_PER_DAY #=672
First_n_t = int(.11*L*T)

ThetaStar_expCbarcum_evalu_opt, ThetaStar_expCtilcum_evalu_opt, \
_, _, \
Best_theta_evalu_opt, Worst_theta_evalu_opt, \
_, _, \
_, _, \
Record_evalu_opt = \
  evl.do_evalu_opt(L, T, Best_theta, Pars)

Df_evalu_opt = pd.DataFrame.from_records(
  Record_evalu_opt[:First_n_t], columns=Pars.LABELS)
print(f'{ThetaStar_expCbarcum_evalu_opt.iloc[-1]=:.2f}')
end = time.time(); print(f'EXECUTION TIME: {end - start} seconds')

# %% ../nbs/00_core.ipynb 85
start = time.time()
## to test
# if 'EVALU' in cf.MODES:
L = 2 #20 #5 #2 #2db #10pub
T = 7*Pars.SLOTS_PER_DAY #=672
First_n_t = int(.11*L*T)

ThetaStar_expCbarcum_evalu_non, ThetaStar_expCtilcum_evalu_non, \
_, _, \
Best_theta_evalu_non, Worst_theta_evalu_non, \
_, _, \
_, _, \
Record_evalu_non = \
  evl.do_evalu_non(L, T, Worst_theta, Pars)

Df_evalu_non = pd.DataFrame.from_records(
  Record_evalu_non[:First_n_t], columns=Pars.LABELS)
print(f'{ThetaStar_expCbarcum_evalu_non.iloc[-1]=:.2f}')
end = time.time(); print(f'EXECUTION TIME: {end - start} seconds')

# %% ../nbs/00_core.ipynb 89
start = time.time()
L = 1 #20 #5 #2 #2db #10pub
T = 7*Pars.SLOTS_PER_DAY #=672
First_n_t = int(1*L*T)

ThetaStar_expCbarcum_evalu_opt, ThetaStar_expCtilcum_evalu_opt, \
_, _, \
Best_theta_evalu_opt, Worst_theta_evalu_opt, \
_, _, \
_, _, \
Record_evalu_opt = \
  evl.do_evalu_opt(L, T, Best_theta, Pars)

Df_evalu_opt = pd.DataFrame.from_records(
  Record_evalu_opt[:First_n_t], columns=Pars.LABELS)
print(f'{ThetaStar_expCbarcum_evalu_opt.iloc[-1]=:.2f}')
end = time.time(); print(f'EXECUTION TIME: {end - start} seconds')

# %% ../nbs/00_core.ipynb 90
start = time.time()
L = 1 #20 #5 #2 #2db #10pub
T = 7*Pars.SLOTS_PER_DAY #=672
First_n_t = int(1*L*T)

ThetaStar_expCbarcum_evalu_non, ThetaStar_expCtilcum_evalu_non, \
_, _, \
Best_theta_evalu_non, Worst_theta_evalu_non, \
_, _, \
_, _, \
Record_evalu_non = \
  evl.do_evalu_non(L, T, Worst_theta, Pars)

Df_evalu_non = pd.DataFrame.from_records(
  Record_evalu_non[:First_n_t], columns=Pars.LABELS)
print(f'{ThetaStar_expCbarcum_evalu_non.iloc[-1]=:.2f}')
end = time.time(); print(f'EXECUTION TIME: {end - start} seconds')
