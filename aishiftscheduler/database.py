# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/16_database.ipynb.

# %% auto 0
__all__ = ['SQLALCHEMY_DATABASE_URL', 'engine', 'SessionLocal', 'Base', 'get_db']

# %% ../nbs/16_database.ipynb 7
# from typing import List
# from fastapi import FastAPI, Response, status, HTTPException, Depends, APIRouter
# from pydantic import BaseModel
# # from passlib.context import CryptContext
# from fastapi.middleware.cors import CORSMiddleware
# from fastapi.params import Body
# from random import randrange
# import psycopg2
# from psycopg2.extras import RealDictCursor

## sqlalchemy and ORM (database.py from tut)
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
import psycopg2
from psycopg2.extras import RealDictCursor
SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:p@localhost/sai_db2'
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# import aishiftscheduler.dbmodels as dbm
# import aishiftscheduler.schemas as sch

# from aishiftscheduler.production import get_db

# %% ../nbs/16_database.ipynb 8
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# %% ../nbs/16_database.ipynb 9
## db stuff
import time
while True:
    try:
        conn = psycopg2.connect(host='localhost', database='sai_db2', user='postgres', password='p', cursor_factory=RealDictCursor)
        cursor = conn.cursor()
        print("Database connection was successful!")
        break
    except Exception as error:
        print("Connecting to database failed")
        print("Error: ", error)       
        time.sleep(2)
