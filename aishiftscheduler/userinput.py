# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/15_routers.ipynb.

# %% auto 0
__all__ = ['SQLALCHEMY_DATABASE_URL', 'engine', 'SessionLocal', 'Base', 'router', 'get_userinputs', 'create_userinputs',
           'get_userinput', 'delete_userinput', 'update_userinput', 'create_user']

# %% ../nbs/15_routers.ipynb 7
from fastapi import FastAPI, Response, status, HTTPException, Depends
from pydantic import BaseModel
# from passlib.context import CryptContext
from fastapi.middleware.cors import CORSMiddleware
from fastapi.params import Body
from random import randrange
import psycopg2
from psycopg2.extras import RealDictCursor

## sqlalchemy and ORM (database.py from tut)
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:p@localhost/sai_db2'
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

import aishiftscheduler.dbmodels as dbm
import aishiftscheduler.schemas as sch

# %% ../nbs/15_routers.ipynb 8
router = APIRouter()

# %% ../nbs/15_routers.ipynb 10
# @app.get("/userinputs", response_model=List[sch.UserInput])
@router.get("/userinputs", response_model=List[sch.UserInput])
def get_userinputs(db: Session=Depends(get_db)):
    userinputs = db.query(dbm.UserInput).all()
    return userinputs

# %% ../nbs/15_routers.ipynb 11
@router.post("/userinputs", status_code=status.HTTP_201_CREATED, response_model=sch.UserInput)
def create_userinputs(userinput: sch.UserInputCreate, db: Session = Depends(get_db)):
    new_userinput = dbm.UserInput(**userinput.model_dump())
    db.add(new_userinput)
    db.commit()
    db.refresh(new_userinput)
    return new_userinput

# %% ../nbs/15_routers.ipynb 12
@router.get("/userinputs/{id}", response_model=sch.UserInput)
def get_userinput(id: int, db: Session = Depends(get_db)):
    userinput = db.query(dbm.UserInput).filter(dbm.UserInput.id == id).first()
    if not userinput:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"userinput with id: {id} was not found")
    return userinput

# %% ../nbs/15_routers.ipynb 13
@router.delete("/userinputs/{id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_userinput(id: int, db: Session = Depends(get_db)):
    userinput = db.query(dbm.UserInput).filter(dbm.UserInput.id == id)
    if userinput.first() == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"userinput with id: {id} does not exist")
    userinput.delete(synchronize_session=False)
    db.commit()
    return Response(status_code=status.HTTP_204_NO_CONTENT)


# %% ../nbs/15_routers.ipynb 14
@router.put("/userinputs/{id}", response_model=sch.UserInput)
def update_userinput(id: int, updated_userinput: sch.UserInputUpdate, db: Session=Depends(get_db)):
    userinput_query = db.query(dbm.UserInput).filter(dbm.UserInput.id == id)
    userinput = userinput_query.first()
    if userinput == None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, 
            detail=f"userinput with id: {id} does not exist")    
    userinput_query.update(updated_userinput.model_dump(), synchronize_session=False)
    db.commit()
    return userinput_query.first()

# %% ../nbs/15_routers.ipynb 16
## users
@router.post("/users", status_code=status.HTTP_201_CREATED, response_model=sch.UserOut)
def create_user(user: sch.UserCreate, db: Session=Depends(get_db)):

    # has the password - user.password
    # hashed_password = pwd_context.hash(user.password)
    hashed_password = utl.hash(user.password)
    user.password = hashed_password

    new_user = dbm.User(**user.model_dump())
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user
